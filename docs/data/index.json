{"id":0,"name":"typedoc-theme-yaf","kind":1,"flags":{},"originalName":"","children":[],"groups":[{"title":"Modules","children":[1,3,2,57]}],"is":{"declaration":false},"location":{"query":"index","hash":""},"text":{"readme":"\n<a href=\"#typedoc-theme-yaf\" id=\"typedoc-theme-yaf\" style=\"color: inherit; text-decoration: none;\">\n  <h1>typedoc-theme-yaf</h1>\n</a>\n<p><strong>ALPHA:</strong> This is not production ready.</p>\n<p>A theme that optimises deep project exploration, graphical clarity and a fluid end user experience.</p>\n<p><a href=\"https://raw.githubusercontent.com/citkane/typedoc-theme-yaf/assets/typedoc-theme-yaf.jpg\"><img src=\"https://raw.githubusercontent.com/citkane/typedoc-theme-yaf/assets/typedoc-theme-yaf.jpg\" height=\"auto\" width=\"500px\"/></a></p>\n\n<a href=\"#live-example\" id=\"live-example\" style=\"color: inherit; text-decoration: none;\">\n  <h4><a href=\"https://citkane.github.io/typedoc-theme-yaf/\">Live Example</a></h4>\n</a>\n\n<a href=\"#usage\" id=\"usage\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Usage</h2>\n</a>\n<p>This theme couples and cross links your documentation content to a contextual menu tree.</p>\n<p>The expanding menu contains links to all depths of information. Conversely, you can click on any content heading to expand, scroll and highlight your place in the documentation tree.</p>\n\n<a href=\"#installation\" id=\"installation\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Installation</h3>\n</a>\n<p><strong>ALPHA:</strong> This is not yet on NPM, so until then, instead of the below, do a git clone, run the <code>build</code> script and then npm install from your build folder location. </p>\n<pre><code><span class=\"pl-smi\">npm</span> <span class=\"pl-smi\">i</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">D</span> <span class=\"pl-smi\">typedoc</span><span class=\"pl-k\">-</span><span class=\"pl-smi\">theme</span><span class=\"pl-k\">-</span><span class=\"pl-smi\">yaf</span>\n</code></pre>\n<p>Once installed, adjust your <a href=\"https://typedoc.org/guides/options/#options-1\">TypeDoc options</a> to reflect:</p>\n<pre><code class=\"language-json\">{\n    <span class=\"pl-ent\">\"plugin\"</span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>typedoc-theme-yaf<span class=\"pl-pds\">\"</span></span>],\n    <span class=\"pl-ent\">\"theme\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yaf<span class=\"pl-pds\">\"</span></span>\n}\n</code></pre>\n<p>Proceed with building your documentation.</p>\n<p>Note that the <code>index.html</code> output for the documentation build will be a SPA entry point, so very little will happen if you open it with your browser locally. You will have to serve it with a server application of your choice, eg. the VS-Code <a href=\"https://github.com/ritwickdey/vscode-live-server\">Live Server</a> plugin.</p>\n\n<a href=\"#frontend-strategy\" id=\"frontend-strategy\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Frontend Strategy</h2>\n</a>\n<p>The frontend decouples itself from the default TypeDoc theme <code>.html</code> fragment strategy and creates a single page application (SPA) which consumes <code>.json</code> data fragments.</p>\n<p>This facilitates a user experience where place-keeping while reading and navigating is maintained across document pages, page reloads and browser sessions.</p>\n<p>Options to show or hide complexity, such as private or inherited items, are left to the end user. Toggle buttons are contextually placed and easy to both understand and use.</p>\n<p>The length of content is handily compressed with folding &quot;drawers&quot;. The open/close state of these as well as the page scroll position is persisted, so the end user spends less time finding items on long pages and more time reading them.</p>\n<p>TODO feature: \nProvide tabbed bookmarks for convenient cross referencing between documentation locations. </p>\n<p>The SPA is built with zero dependencies using <a href=\"https://en.wikipedia.org/wiki/Web_Components\">Web Components</a>.</p>\n\n<a href=\"#backend-strategy\" id=\"backend-strategy\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Backend Strategy</h2>\n</a>\n<p>The backend takes as input the default TypeDoc <a href=\"https://typedoc.org/api/classes/ProjectReflection.html\"><code>ProjectReflection</code></a> and <a href=\"https://typedoc.org/api/interfaces/JSONOutput.ProjectReflection.html\"><code>JSONOutput.ProjectReflection</code></a> and outputs a collection of <code>.json</code> data files for consumption by the frontend.</p>\n<p>The theme does not (majorly) interfere with the default TypeDoc data construction flow, but rather serialises the standard output into it&#39;s own needs.   </p>\n\n<a href=\"#contribution-and-development\" id=\"contribution-and-development\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Contribution and Development</h2>\n</a>\n<p>Please let us know in the <a href=\"https://github.com/citkane/typedoc-theme-yaf/issues\">issues</a> if something breakingly wrong is afoot when you render your project with this theme.</p>\n<p>If you spot a gremlin, or want to suggest an enhancement, please use the Github <a href=\"https://github.com/citkane/typedoc-theme-yaf/discussions\">discussion</a> section.</p>\n<p>If you want to get involved in the code, please clone <a href=\"https://github.com/citkane/typedoc-theme-yaf\">the repo</a> and submit your pull requests.<br>You can spin up a local <a href=\"https://github.com/citkane/typedoc-plugin-hot-dev\">hot development</a> instance by running <code>npx hot-dev</code> from your terminal. This is already installed as a theme dependency. For the first run only, do <code>npm i &amp;&amp; npm run build</code>.</p>\n\n<a href=\"#roadmap\" id=\"roadmap\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Roadmap</h2>\n</a>\n\n<a href=\"#short-term\" id=\"short-term\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Short Term</h3>\n</a>\n<ul>\n<li>Implement search functionality</li>\n<li>Implement document versioning</li>\n<li><del>Implement reflection reference linkages across mono-repo workspaces</del> âœ…</li>\n<li>Write meaningful tests and pretend that this was always a test driven design process...</li>\n</ul>\n\n<a href=\"#medium-term\" id=\"medium-term\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Medium Term</h3>\n</a>\n<ul>\n<li>Implement tabbed bookmarks</li>\n<li>Implement end user sticky notes (using local storage)</li>\n<li>Migrate code view from external links to local rendering. Enable bookmarks, notes for same.</li>\n<li>Support diagrams in MarkDown</li>\n<li>Main navigation menu extension, eg. <code>.md</code> defined tutorials and documentation with hierarchical chapters.</li>\n</ul>\n\n<a href=\"#long-term\" id=\"long-term\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Long term</h3>\n</a>\n<ul>\n<li>Either collaborate with TypeDoc to normalise it&#39;s default JSON output, or purpose build a TSDoc document parser and migrate this theme to be a standalone documentation product.</li>\n</ul>\n"}}
